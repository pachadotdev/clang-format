name: 'Clang-format Multi-version'
description: 'Format C/C++ code with multiple clang-format versions'
author: 'pachadotdev'

branding:
  icon: 'code'
  color: 'blue'

inputs:
  version:
    description: 'Clang-format version to use (11-19)'
    required: false
    default: '19'
  
  files:
    description: 'Files or patterns to format (default: all C/C++ files in repository)'
    required: false
    default: ''
  
  auto-commit:
    description: 'Automatically commit formatted changes'
    required: false
    default: 'true'
  
  commit-message:
    description: 'Commit message for auto-commit'
    required: false
    default: 'style: auto-format code with clang-format'
  
  fail-on-diff:
    description: 'Fail the action if formatting changes are needed (useful for PR checks)'
    required: false
    default: 'false'
  
  working-directory:
    description: 'Working directory to run clang-format in'
    required: false
    default: '.'

outputs:
  files-changed:
    description: 'Number of files that were changed'
    value: ${{ steps.format.outputs.files-changed }}
  
  has-changes:
    description: 'Whether any files were changed (true/false)'
    value: ${{ steps.format.outputs.has-changes }}

runs:
  using: 'composite'
  steps:
    - name: Setup clang-format
      shell: bash
      run: |
        echo "üöÄ Setting up clang-format-${{ inputs.version }}"
        
        # Create binary directory
        mkdir -p /tmp/clang-format-bin
        
        # Download clang-format binaries
        RELEASE_URL="https://github.com/pachadotdev/clang-format/releases/download/v0.1/clang-format.tar.gz"
        echo "üì• Downloading clang-format binaries..."
        
        cd /tmp
        curl -L -o clang-format.tar.gz "$RELEASE_URL" || {
          echo "‚ùå Failed to download clang-format binaries"
          echo "Please check if the release exists at: $RELEASE_URL"
          exit 1
        }
        
        tar -xzf clang-format.tar.gz -C clang-format-bin || {
          echo "‚ùå Failed to extract clang-format binaries"
          exit 1
        }
        
        chmod +x clang-format-bin/clang-format* || {
          echo "‚ùå Failed to make binaries executable"
          exit 1
        }
        
        # Add to PATH
        echo "/tmp/clang-format-bin" >> $GITHUB_PATH
        
        # Verify installation
        if [ -f "/tmp/clang-format-bin/clang-format-${{ inputs.version }}" ]; then
          echo "‚úÖ clang-format-${{ inputs.version }} installed successfully"
          /tmp/clang-format-bin/clang-format-${{ inputs.version }} --version
        else
          echo "‚ùå clang-format-${{ inputs.version }} not found"
          echo "Available versions:"
          ls -la /tmp/clang-format-bin/ || echo "No files found"
          exit 1
        fi

    - name: Format code
      id: format
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üé® Formatting code with clang-format-${{ inputs.version }}"
        
        # Store git status before formatting
        git status --porcelain > /tmp/git-status-before
        
        # Determine files to format
        if [ -n "${{ inputs.files }}" ]; then
          echo "Formatting specified files/patterns: ${{ inputs.files }}"
          FILES="${{ inputs.files }}"
          
          # Expand patterns and check files exist
          FILES_TO_FORMAT=""
          for pattern in $FILES; do
            for file in $pattern; do
              if [ -f "$file" ]; then
                FILES_TO_FORMAT="$FILES_TO_FORMAT $file"
              fi
            done
          done
          FILES="$FILES_TO_FORMAT"
        else
          echo "Finding all C/C++ files..."
          FILES=$(find . -type f \( -name '*.cpp' -o -name '*.hpp' -o -name '*.c' -o -name '*.h' -o -name '*.cc' -o -name '*.cxx' -o -name '*.hxx' \) 2>/dev/null)
        fi
        
        if [ -z "$FILES" ]; then
          echo "‚ÑπÔ∏è  No C/C++ files found to format"
          echo "files-changed=0" >> $GITHUB_OUTPUT
          echo "has-changes=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Count total files
        TOTAL_FILES=$(echo "$FILES" | wc -w)
        echo "Found $TOTAL_FILES file(s) to format"
        
        # Format files
        FILES_CHANGED=0
        for file in $FILES; do
          if [ -f "$file" ]; then
            echo "  üìÑ Formatting: $file"
            
            # Store original content hash
            BEFORE_HASH=$(sha256sum "$file" 2>/dev/null | cut -d' ' -f1 || echo "")
            
            # Format the file
            /tmp/clang-format-bin/clang-format-${{ inputs.version }} -i "$file" || {
              echo "‚ö†Ô∏è  Failed to format $file"
              continue
            }
            
            # Check if file changed
            AFTER_HASH=$(sha256sum "$file" 2>/dev/null | cut -d' ' -f1 || echo "")
            if [ "$BEFORE_HASH" != "$AFTER_HASH" ]; then
              FILES_CHANGED=$((FILES_CHANGED + 1))
              echo "    ‚ú® File was modified"
            else
              echo "    ‚úÖ No changes needed"
            fi
          else
            echo "  ‚ö†Ô∏è  File not found: $file"
          fi
        done
        
        # Check for overall changes
        git status --porcelain > /tmp/git-status-after
        
        if ! cmp -s /tmp/git-status-before /tmp/git-status-after; then
          echo "has-changes=true" >> $GITHUB_OUTPUT
          echo "files-changed=$FILES_CHANGED" >> $GITHUB_OUTPUT
          echo ""
          echo "‚ú® Formatted $FILES_CHANGED out of $TOTAL_FILES file(s)"
          
          # Show diff summary
          echo ""
          echo "üìä Changes summary:"
          git diff --stat || echo "Unable to show diff stats"
          
          echo ""
          echo "üìã Modified files:"
          git diff --name-only || echo "Unable to list modified files"
          
        else
          echo "has-changes=false" >> $GITHUB_OUTPUT
          echo "files-changed=0" >> $GITHUB_OUTPUT
          echo "‚úÖ No formatting changes needed - code is already properly formatted"
        fi

    - name: Auto-commit changes
      if: steps.format.outputs.has-changes == 'true' && inputs.auto-commit == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üìù Auto-committing formatted changes"
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action (clang-format)"
        
        # Add and commit changes
        git add -A
        git commit -m "${{ inputs.commit-message }}" || {
          echo "‚ùå Failed to commit changes"
          exit 1
        }
        
        # Push changes
        git push || {
          echo "‚ùå Failed to push changes"
          echo "This might happen if the repository requires additional permissions"
          echo "Make sure to use a token with write permissions in actions/checkout"
          exit 1
        }
        
        echo "‚úÖ Changes committed and pushed successfully"

    - name: Check for required changes
      if: inputs.fail-on-diff == 'true' && steps.format.outputs.has-changes == 'true'
      shell: bash
      run: |
        echo ""
        echo "‚ùå Code formatting issues detected!"
        echo ""
        echo "The following files need formatting with clang-format-${{ inputs.version }}:"
        git diff --name-only
        echo ""
        echo "üìù To fix this locally, run:"
        echo "   clang-format-${{ inputs.version }} -i \$(git diff --name-only)"
        echo ""
        echo "Or use the auto-commit feature by setting 'auto-commit: true'"
        echo ""
        exit 1
