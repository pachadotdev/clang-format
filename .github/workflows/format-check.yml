name: Auto-format Code

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  auto-format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Download clang-format binaries
      run: |
        # Download the latest release binaries
        curl -fsSL https://github.com/pachadotdev/clang-format/releases/latest/download/clang-format.tar.gz | tar -xz
        chmod +x clang-format*
        
        echo "‚úÖ Downloaded clang-format binaries from release"
    
    - name: Auto-format and commit changes
      run: |
        # Find all C/C++ files (limit to 100 files to avoid overwhelming)
        FILES=$(find . -name '*.cpp' -o -name '*.hpp' -o -name '*.h' -o -name '*.c' -o -name '*.cc' -o -name '*.cxx' | grep -v build | head -100)
        
        if [ -z "$FILES" ]; then
          echo "‚ÑπÔ∏è  No C/C++ files found to format"
          exit 0
        fi
        
        echo "üìù Found $(echo "$FILES" | wc -l) C/C++ files to check"
        
        # Format files with clang-format-18 (default)
        echo "$FILES" | xargs ./clang-format-18 -i
        
        # Check if any files were changed
        if ! git diff --exit-code; then
          echo "üîß Auto-formatting C++ code with clang-format-18"
          echo "Files formatted:"
          git diff --name-only
          
          # Configure git for the commit
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add and commit the changes
          git add .
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, create a new commit
            git commit -m "style: auto-format C++ code with clang-format-18
            
            [skip ci]"
            git push origin HEAD:${{ github.head_ref }}
          else
            # For direct pushes, amend the last commit
            git commit --amend --no-edit
            git push --force-with-lease origin ${{ github.ref_name }}
          fi
          
          echo "‚úÖ Code formatted and committed"
        else
          echo "‚úÖ Code formatting is already correct"
        fi

  verify-release-binaries:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download and verify release binaries
      run: |
        # Download the latest release binaries
        curl -fsSL https://github.com/pachadotdev/clang-format/releases/latest/download/clang-format.tar.gz | tar -xz
        
        # Verify all expected versions are present
        echo "üì¶ Verifying release contains all clang-format versions:"
        for version in {11..19}; do
          if [ -f "clang-format-$version" ]; then
            echo "‚úÖ clang-format-$version"
            ./clang-format-$version --version
          else
            echo "‚ùå clang-format-$version missing"
            exit 1
          fi
        done
        
        # Test the wrapper script
        if [ -f "clang-format" ]; then
          echo "‚úÖ clang-format wrapper script present"
          chmod +x clang-format
        else
          echo "‚ùå clang-format wrapper script missing"
          exit 1
        fi
        
        echo "üéâ All binaries verified successfully!"
