name: Code Formatting Check

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  format-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        clang-version: [11, 12, 13, 14, 15, 16, 17, 18]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download clang-format binaries
      run: |
        # Download the latest release binaries
        curl -fsSL https://github.com/pachadotdev/clang-format/releases/latest/download/clang-format.tar.gz | tar -xz
        chmod +x clang-format*
        
        # Verify the specific version we need exists
        if [ ! -f "clang-format-${{ matrix.clang-version }}" ]; then
          echo "‚ùå clang-format-${{ matrix.clang-version }} not found in release"
          exit 1
        fi
        
        echo "‚úÖ Using clang-format-${{ matrix.clang-version }} from release"
    
    - name: Run formatting check
      run: |
        # Find all C/C++ files
        FILES=$(find . -name '*.cpp' -o -name '*.hpp' -o -name '*.h' -o -name '*.c' -o -name '*.cc' -o -name '*.cxx' | grep -v build | head -20)
        
        if [ -z "$FILES" ]; then
          echo "‚ÑπÔ∏è  No C/C++ files found to format"
          exit 0
        fi
        
        # Format files with the specific version
        echo "$FILES" | xargs ./clang-format-${{ matrix.clang-version }} -i
        
        # Check if any files were changed
        if ! git diff --exit-code; then
          echo "‚ùå Code formatting issues found with clang-format-${{ matrix.clang-version }}"
          echo "Files that need formatting:"
          git diff --name-only
          echo ""
          echo "Please run: clang-format-${{ matrix.clang-version }} -i <file>"
          exit 1
        else
          echo "‚úÖ Code formatting is correct with clang-format-${{ matrix.clang-version }}"
        fi

  verify-release-binaries:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download and verify release binaries
      run: |
        # Download the latest release binaries
        curl -fsSL https://github.com/pachadotdev/clang-format/releases/latest/download/clang-format.tar.gz | tar -xz
        
        # Verify all expected versions are present
        echo "üì¶ Verifying release contains all clang-format versions:"
        for version in {11..19}; do
          if [ -f "clang-format-$version" ]; then
            echo "‚úÖ clang-format-$version"
            ./clang-format-$version --version
          else
            echo "‚ùå clang-format-$version missing"
            exit 1
          fi
        done
        
        # Test the wrapper script
        if [ -f "clang-format" ]; then
          echo "‚úÖ clang-format wrapper script present"
          chmod +x clang-format
        else
          echo "‚ùå clang-format wrapper script missing"
          exit 1
        fi
        
        echo "üéâ All binaries verified successfully!"
